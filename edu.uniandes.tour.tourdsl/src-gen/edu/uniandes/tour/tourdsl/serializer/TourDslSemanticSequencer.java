/*
 * generated by Xtext 2.12.0
 */
package edu.uniandes.tour.tourdsl.serializer;

import com.google.inject.Inject;
import edu.uniandes.tour.tourdsl.services.TourDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import projectTour.Hotspot;
import projectTour.Panorama;
import projectTour.Position;
import projectTour.ProjectTourPackage;
import projectTour.Rotation;
import projectTour.Tour;

@SuppressWarnings("all")
public class TourDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TourDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjectTourPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectTourPackage.HOTSPOT:
				sequence_Hotspot(context, (Hotspot) semanticObject); 
				return; 
			case ProjectTourPackage.PANORAMA:
				sequence_Panorama(context, (Panorama) semanticObject); 
				return; 
			case ProjectTourPackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			case ProjectTourPackage.ROTATION:
				sequence_Rotation(context, (Rotation) semanticObject); 
				return; 
			case ProjectTourPackage.TOUR:
				sequence_Tour(context, (Tour) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Hotspot returns Hotspot
	 *
	 * Constraint:
	 *     (name=EString to=[Panorama|EString] position=Position rotation=Rotation)
	 */
	protected void sequence_Hotspot(ISerializationContext context, Hotspot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectTourPackage.Literals.HOTSPOT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectTourPackage.Literals.HOTSPOT__NAME));
			if (transientValues.isValueTransient(semanticObject, ProjectTourPackage.Literals.HOTSPOT__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectTourPackage.Literals.HOTSPOT__TO));
			if (transientValues.isValueTransient(semanticObject, ProjectTourPackage.Literals.HOTSPOT__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectTourPackage.Literals.HOTSPOT__POSITION));
			if (transientValues.isValueTransient(semanticObject, ProjectTourPackage.Literals.HOTSPOT__ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectTourPackage.Literals.HOTSPOT__ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHotspotAccess().getNameEStringParserRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHotspotAccess().getToPanoramaEStringParserRuleCall_8_0_1(), semanticObject.eGet(ProjectTourPackage.Literals.HOTSPOT__TO, false));
		feeder.accept(grammarAccess.getHotspotAccess().getPositionPositionParserRuleCall_10_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getHotspotAccess().getRotationRotationParserRuleCall_12_0(), semanticObject.getRotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Panorama returns Panorama
	 *
	 * Constraint:
	 *     (name=EString description=EString imagePath=EString hotspot+=Hotspot+)
	 */
	protected void sequence_Panorama(ISerializationContext context, Panorama semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (x=EDouble? y=EDouble? z=EDouble?)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rotation returns Rotation
	 *
	 * Constraint:
	 *     (x=EDouble? y=EDouble? z=EDouble?)
	 */
	protected void sequence_Rotation(ISerializationContext context, Rotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tour returns Tour
	 *
	 * Constraint:
	 *     (name=EString panorama+=Panorama+)
	 */
	protected void sequence_Tour(ISerializationContext context, Tour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
