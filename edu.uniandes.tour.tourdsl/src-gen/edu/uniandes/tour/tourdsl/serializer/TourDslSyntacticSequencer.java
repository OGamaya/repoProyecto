/*
 * generated by Xtext 2.12.0
 */
package edu.uniandes.tour.tourdsl.serializer;

import com.google.inject.Inject;
import edu.uniandes.tour.tourdsl.services.TourDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TourDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TourDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Hotspot_COMATerminalRuleCall_14_q;
	protected AbstractElementAlias match_Panorama_COMATerminalRuleCall_20_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TourDslGrammarAccess) access;
		match_Hotspot_COMATerminalRuleCall_14_q = new TokenAlias(false, true, grammarAccess.getHotspotAccess().getCOMATerminalRuleCall_14());
		match_Panorama_COMATerminalRuleCall_20_q = new TokenAlias(false, true, grammarAccess.getPanoramaAccess().getCOMATerminalRuleCall_20());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMARule())
			return getCOMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDESCRIPTIONRule())
			return getDESCRIPTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLBRACKETRule())
			return getLBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENTISISCUADRADORule())
			return getLPARENTISISCUADRADOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNAMERule())
			return getNAMEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPOSXRule())
			return getPOSXToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPOSYRule())
			return getPOSYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPOSZRule())
			return getPOSZToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRBRACKETRule())
			return getRBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getROTXRule())
			return getROTXToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getROTYRule())
			return getROTYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getROTZRule())
			return getROTZToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENTISISCUADRADORule())
			return getRPARENTISISCUADRADOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTORule())
			return getTOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTWOPOINTSRule())
			return getTWOPOINTSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getT_HOTSPOTRule())
			return getT_HOTSPOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getT_IMAGENRule())
			return getT_IMAGENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getT_PANORAMARule())
			return getT_PANORAMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getT_POSITIONRule())
			return getT_POSITIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getT_ROTATIONRule())
			return getT_ROTATIONToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMA:",";
	 */
	protected String getCOMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DESCRIPTION: "description";
	 */
	protected String getDESCRIPTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "description";
	}
	
	/**
	 * terminal LBRACKET:	"{";
	 */
	protected String getLBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal LPARENTISISCUADRADO: "[";
	 */
	protected String getLPARENTISISCUADRADOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal NAME: "name";
	 */
	protected String getNAMEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "name";
	}
	
	/**
	 * terminal POSX:"posx";
	 */
	protected String getPOSXToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "posx";
	}
	
	/**
	 * terminal POSY:"posy";
	 */
	protected String getPOSYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "posy";
	}
	
	/**
	 * terminal POSZ:"posz";
	 */
	protected String getPOSZToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "posz";
	}
	
	/**
	 * terminal RBRACKET:	"}";
	 */
	protected String getRBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal ROTX:"rotx";
	 */
	protected String getROTXToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rotx";
	}
	
	/**
	 * terminal ROTY:"roty";
	 */
	protected String getROTYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "roty";
	}
	
	/**
	 * terminal ROTZ:"rotz";
	 */
	protected String getROTZToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rotz";
	}
	
	/**
	 * terminal RPARENTISISCUADRADO: "]";
	 */
	protected String getRPARENTISISCUADRADOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * terminal TO:"to";
	 */
	protected String getTOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "to";
	}
	
	/**
	 * terminal TWOPOINTS:":";
	 */
	protected String getTWOPOINTSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal T_HOTSPOT:"hotspots";
	 */
	protected String getT_HOTSPOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "hotspots";
	}
	
	/**
	 * terminal T_IMAGEN: "imagePath";
	 */
	protected String getT_IMAGENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "imagePath";
	}
	
	/**
	 * terminal T_PANORAMA:"panoramas";
	 */
	protected String getT_PANORAMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "panoramas";
	}
	
	/**
	 * terminal T_POSITION:"position";
	 */
	protected String getT_POSITIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "position";
	}
	
	/**
	 * terminal T_ROTATION:"rotation";
	 */
	protected String getT_ROTATIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rotation";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Hotspot_COMATerminalRuleCall_14_q.equals(syntax))
				emit_Hotspot_COMATerminalRuleCall_14_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Panorama_COMATerminalRuleCall_20_q.equals(syntax))
				emit_Panorama_COMATerminalRuleCall_20_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     rotation=Rotation RBRACKET (ambiguity) (rule end)
	 */
	protected void emit_Hotspot_COMATerminalRuleCall_14_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     hotspot+=Hotspot RPARENTISISCUADRADO RBRACKET (ambiguity) (rule end)
	 */
	protected void emit_Panorama_COMATerminalRuleCall_20_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
